const axios = require('axios');
const pool = require('../config/db'); // PostgreSQL pool

// Gemini API –∞—Ä“õ—ã–ª—ã –∞—É—ã–ª —à–∞—Ä—É–∞—à—ã–ª—ã“ì—ã —Ç—É—Ä–∞–ª—ã –∂–∞—É–∞–ø –∞–ª—É
const askGemini = async (req, res) => {
  try {
    const userQuestion = req.body.question;

    const prompt = `
–°–µ–Ω –∞—É—ã–ª —à–∞—Ä—É–∞—à—ã–ª—ã“ì—ã –±–æ–π—ã–Ω—à–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ “ì–∞–Ω–∞ –º—ñ–Ω–¥–µ—Ç—Ç—ñ –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—ñ—Å—ñ“£.
–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ —Å“±—Ä–∞“ì—ã–Ω–∞ –∂–∞—É–∞–ø –±–µ—Ä–º–µ—Å –±“±—Ä—ã–Ω, –æ–Ω—ã“£ –∞—É—ã–ª —à–∞—Ä—É–∞—à—ã–ª—ã“ì—ã–Ω–∞ “õ–∞—Ç—ã—Å—Ç—ã –µ–∫–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä.
–ï–≥–µ—Ä —Å“±—Ä–∞“õ –∞—É—ã–ª —à–∞—Ä—É–∞—à—ã–ª—ã“ì—ã–Ω–∞ “õ–∞—Ç—ã—Å—ã –±–æ–ª–º–∞—Å–∞, –º—ã–Ω–∞ –∂–∞—É–∞–ø—Ç—ã “õ–∞–π—Ç–∞—Ä:
"–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω —Ç–µ–∫ –∞—É—ã–ª —à–∞—Ä—É–∞—à—ã–ª—ã“ì—ã –±–æ–π—ã–Ω—à–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–∞–º—ã–Ω."

–°“±—Ä–∞“õ: ${userQuestion}
`;

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [
          {
            parts: [
              {
                text: prompt,
              },
            ],
          },
        ],
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    const aiResponse = response.data.candidates?.[0]?.content?.parts?.[0]?.text || '–ñ–∞—É–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã.';
    res.status(200).json({ response: aiResponse });
  } catch (error) {
    console.error('üî¥ Gemini “õ–∞—Ç–µ—Å—ñ:', error.response?.data || error.message);
    res.status(500).json({ error: 'AI –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–º–∞–¥—ã.' });
  }
};

// –ö–µ“£–µ—Å—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω–∞–Ω –∞–ª—É
const getTips = async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT id, question, answer, created_at FROM tips ORDER BY created_at DESC'
    );
    res.status(200).json(result.rows);
  } catch (error) {
    console.error('üî¥ –ö–µ“£–µ—Å—Ç–µ—Ä–¥—ñ –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ:', error.message);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã, –∫–µ“£–µ—Å—Ç–µ—Ä–¥—ñ –∞–ª–∞ –∞–ª–º–∞–¥—ã“õ' });
  }
};

module.exports = {
  askGemini,
  getTips,
};
